// Code generated by 'gorm.io/cli/gorm'. DO NOT EDIT.

package models

import (
	"context"
	"regexp"
	"strings"

	"gorm.io/cli/gorm/examples/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
)

func UserQuery[T any](db *gorm.DB, opts ...clause.Expression) _UserQueryInterface[T] {
	return _UserQueryImpl[T]{
		Interface: gorm.G[T](db, opts...),
	}
}

type _UserQueryInterface[T any] interface {
	gorm.Interface[T]
	QueryWith(ctx context.Context, user models.User) (models.User, error)
	UpdateWith(ctx context.Context, user models.User) error
}

type _UserQueryImpl[T any] struct {
	gorm.Interface[T]
}

func (e _UserQueryImpl[T]) QueryWith(ctx context.Context, user models.User) (models.User, error) {
	var sb strings.Builder
	params := make([]any, 0, 3)

	sb.WriteString("SELECT * FROM ?")
	params = append(params, clause.Table{Name: clause.CurrentTable})
	{
		var tmp strings.Builder
		if user.ID > 0 {
			tmp.WriteString(" id=?")
			params = append(params, user.ID)
		}
		if user.Name != "" {
			tmp.WriteString(" name=?")
			params = append(params, user.Name)
		}
		c := strings.TrimSpace(tmp.String())
		if c != "" {
			reTrim := regexp.MustCompile(`(?i)^\s*(?:and|or)\s+|\s+(?:and|or)\s*$`)
			c = reTrim.ReplaceAllString(c, "")
			sb.WriteString(" WHERE ")
			sb.WriteString(c)
		}
	}

	var result models.User
	err := e.Raw(sb.String(), params...).Scan(ctx, &result)
	return result, err
}

func (e _UserQueryImpl[T]) UpdateWith(ctx context.Context, user models.User) error {
	var sb strings.Builder
	params := make([]any, 0, 4)

	sb.WriteString("UPDATE ?")
	params = append(params, clause.Table{Name: clause.CurrentTable})
	{
		var tmp strings.Builder
		if user.Name != "" {
			tmp.WriteString(" name=?,")
			params = append(params, user.Name)
		}
		if user.Age > 0 {
			tmp.WriteString(" age=?")
			params = append(params, user.Age)
		}
		c := strings.TrimSpace(tmp.String())
		if c != "" {
			c = strings.Trim(c, ", ")
			sb.WriteString(" SET ")
			sb.WriteString(c)
		}
	}
	sb.WriteString(" WHERE id=?")
	params = append(params, user.ID)

	return e.Exec(ctx, sb.String(), params...)
}
