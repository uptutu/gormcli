// Code generated by 'gorm.io/cli/gorm'. DO NOT EDIT.

package models

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
)

func Query[T any](db *gorm.DB, opts ...clause.Expression) _QueryInterface[T] {
	return _QueryImpl[T]{
		Interface: gorm.G[T](db, opts...),
	}
}

type _QueryInterface[T any] interface {
	gorm.Interface[T]
	GetByID(ctx context.Context, id int) (T, error)
	FilterWithColumn(ctx context.Context, column string, value string) (T, error)
}

type _QueryImpl[T any] struct {
	gorm.Interface[T]
}

func (e _QueryImpl[T]) GetByID(ctx context.Context, id int) (T, error) {
	var sb strings.Builder
	params := make([]any, 0, 2)

	sb.WriteString("SELECT * FROM ? WHERE id=?")
	params = append(params, clause.Table{Name: clause.CurrentTable}, id)

	var result T
	err := e.Raw(sb.String(), params...).Scan(ctx, &result)
	return result, err
}

func (e _QueryImpl[T]) FilterWithColumn(ctx context.Context, column string, value string) (T, error) {
	var sb strings.Builder
	params := make([]any, 0, 3)

	sb.WriteString("SELECT * FROM ? WHERE ?=?")
	params = append(params, clause.Table{Name: clause.CurrentTable}, clause.Column{Name: column}, value)

	var result T
	err := e.Raw(sb.String(), params...).Scan(ctx, &result)
	return result, err
}
