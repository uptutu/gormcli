// Code generated by 'gorm.io/cli/gorm'. DO NOT EDIT.

package typed

import (
	"context"
	"regexp"
	"strings"
	"time"

	"gorm.io/cli/gorm/examples/models"
	"gorm.io/cli/gorm/typed"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
)

func Query[T any](db *gorm.DB, opts ...clause.Expression) _QueryInterface[T] {
	return _QueryImpl[T]{
		Interface: typed.G[T](db, opts...),
	}
}

type _QueryInterface[T any] interface {
	typed.Interface[T]
	GetByID(ctx context.Context, id int) (T, error)
	FilterWithColumn(ctx context.Context, column string, value string) (T, error)
	QueryWith(ctx context.Context, user models.User) (T, error)
	UpdateInfo(ctx context.Context, user models.User, id int) error
	Filter(ctx context.Context, users []models.User) ([]T, error)
	FilterByNameAndAge(ctx context.Context, name string, age int) _QueryInterface[T]
	FilterWithTime(ctx context.Context, start time.Time, end time.Time) ([]T, error)
}

type _QueryImpl[T any] struct {
	typed.Interface[T]
}

func (e _QueryImpl[T]) GetByID(ctx context.Context, id int) (T, error) {
	var sb strings.Builder
	params := make([]any, 0, 2)

	sb.WriteString("SELECT * FROM ? WHERE id=? AND name = \"@name\"")
	params = append(params, clause.Table{Name: clause.CurrentTable}, id)

	var result T
	err := e.Raw(sb.String(), params...).Scan(ctx, &result)
	return result, err
}

func (e _QueryImpl[T]) FilterWithColumn(ctx context.Context, column string, value string) (T, error) {
	var sb strings.Builder
	params := make([]any, 0, 3)

	sb.WriteString("SELECT * FROM ? WHERE ?=?")
	params = append(params, clause.Table{Name: clause.CurrentTable}, clause.Column{Name: column}, value)

	var result T
	err := e.Raw(sb.String(), params...).Scan(ctx, &result)
	return result, err
}

func (e _QueryImpl[T]) QueryWith(ctx context.Context, user models.User) (T, error) {
	var sb strings.Builder
	params := make([]any, 0, 2)

	sb.WriteString("SELECT * FROM users")
	if user.ID > 0 {
		sb.WriteString(" WHERE id=?")
		params = append(params, user.ID)
	} else if user.Name != "" {
		sb.WriteString(" WHERE name=?")
		params = append(params, user.Name)
	}

	var result T
	err := e.Raw(sb.String(), params...).Scan(ctx, &result)
	return result, err
}

func (e _QueryImpl[T]) UpdateInfo(ctx context.Context, user models.User, id int) error {
	var sb strings.Builder
	params := make([]any, 0, 4)

	sb.WriteString("UPDATE ?")
	params = append(params, clause.Table{Name: clause.CurrentTable})
	{
		var tmp strings.Builder
		if user.Name != "" {
			tmp.WriteString(" name=?,")
			params = append(params, user.Name)
		}
		if user.Age > 0 {
			tmp.WriteString(" age=?,")
			params = append(params, user.Age)
		}
		if user.Age >= 18 {
			tmp.WriteString(" is_adult=1")
		} else {
			tmp.WriteString(" is_adult=0")
		}
		c := strings.TrimSpace(tmp.String())
		if c != "" {
			c = strings.Trim(c, ", ")
			sb.WriteString(" SET ")
			sb.WriteString(c)
		}
	}
	sb.WriteString(" WHERE id=?")
	params = append(params, id)

	return e.Exec(ctx, sb.String(), params...)
}

func (e _QueryImpl[T]) Filter(ctx context.Context, users []models.User) ([]T, error) {
	var sb strings.Builder
	params := make([]any, 0, 13)

	sb.WriteString("SELECT * FROM ?")
	params = append(params, clause.Table{Name: clause.CurrentTable})
	{
		var tmp strings.Builder
		for _, user := range users {
			if user.Name != "" && user.Age > 0 {
				tmp.WriteString(" (name = ? AND age=? AND role LIKE concat(\"%\",?,\"%\")) OR")
				params = append(params, user.Name, user.Age, user.Role)
			}
		}
		c := strings.TrimSpace(tmp.String())
		if c != "" {
			reTrim := regexp.MustCompile(`(?i)^\s*(?:and|or)\s+|\s+(?:and|or)\s*$`)
			c = reTrim.ReplaceAllString(c, "")
			sb.WriteString(" WHERE ")
			sb.WriteString(c)
		}
	}

	var result []T
	err := e.Raw(sb.String(), params...).Scan(ctx, &result)
	return result, err
}

func (e _QueryImpl[T]) FilterByNameAndAge(ctx context.Context, name string, age int) _QueryInterface[T] {
	var sb strings.Builder
	params := make([]any, 0, 2)

	sb.WriteString("name=? AND age=?")
	params = append(params, name, age)

	e.Where(clause.Expr{SQL: sb.String(), Vars: params})

	return e
}

func (e _QueryImpl[T]) FilterWithTime(ctx context.Context, start time.Time, end time.Time) ([]T, error) {
	var sb strings.Builder
	params := make([]any, 0, 3)

	sb.WriteString("SELECT * FROM ?")
	params = append(params, clause.Table{Name: clause.CurrentTable})
	{
		var tmp strings.Builder
		if !start.IsZero() {
			tmp.WriteString(" created_at > ?")
			params = append(params, start)
		}
		if !end.IsZero() {
			tmp.WriteString(" AND created_at < ?")
			params = append(params, end)
		}
		c := strings.TrimSpace(tmp.String())
		if c != "" {
			reTrim := regexp.MustCompile(`(?i)^\s*(?:and|or)\s+|\s+(?:and|or)\s*$`)
			c = reTrim.ReplaceAllString(c, "")
			sb.WriteString(" WHERE ")
			sb.WriteString(c)
		}
	}

	var result []T
	err := e.Raw(sb.String(), params...).Scan(ctx, &result)
	return result, err
}
